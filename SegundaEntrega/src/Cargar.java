
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author luis
 */
public class Cargar extends javax.swing.JFrame {

    /**
     * Creates new form Cargar
     */
    public Cargar() throws IOException {
        sSistemaOperativo = System.getProperty("os.name");
        extensionCodigoFuente = new String();
        if (sSistemaOperativo.contains("Windows")) {
            //Runtime.getRuntime().exec("runas /profile /user:Administrator \"cmd.exe /c Powrprof.dll,SetSuspendState\"");
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        CargarArchivoDePruebas = new javax.swing.JButton();
        CargarCodigoFuente = new javax.swing.JButton();
        Compilar = new javax.swing.JButton();
        Ejecutar = new javax.swing.JButton();
        ClasesCerradas = new javax.swing.JButton();
        NombreDelEjecutable = new javax.swing.JTextField();
        MostrarResultados1 = new javax.swing.JButton();
        jMinMateria = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jFileChooser1.setApproveButtonText("Cargar Archivo ");
        jFileChooser1.setControlButtonsAreShown(false);
        jFileChooser1.setDialogTitle("");
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        CargarArchivoDePruebas.setText("Cargar Archivo De Pruebas");
        CargarArchivoDePruebas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CargarArchivoDePruebasMouseClicked(evt);
            }
        });
        CargarArchivoDePruebas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarArchivoDePruebasActionPerformed(evt);
            }
        });

        CargarCodigoFuente.setText("Cargar Codigo Fuente");
        CargarCodigoFuente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CargarCodigoFuenteMouseClicked(evt);
            }
        });
        CargarCodigoFuente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarCodigoFuenteActionPerformed(evt);
            }
        });

        Compilar.setText("Compilar");
        Compilar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CompilarMouseClicked(evt);
            }
        });
        Compilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompilarActionPerformed(evt);
            }
        });

        Ejecutar.setText("Ejecutar");
        Ejecutar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EjecutarMouseClicked(evt);
            }
        });
        Ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EjecutarActionPerformed(evt);
            }
        });

        ClasesCerradas.setText("Clases Cerradas");
        ClasesCerradas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ClasesCerradasMouseClicked(evt);
            }
        });
        ClasesCerradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClasesCerradasActionPerformed(evt);
            }
        });

        NombreDelEjecutable.setText("Nombre del ejecutable");
        NombreDelEjecutable.setToolTipText("Nombre");
        NombreDelEjecutable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NombreDelEjecutableMouseClicked(evt);
            }
        });
        NombreDelEjecutable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreDelEjecutableActionPerformed(evt);
            }
        });

        MostrarResultados1.setText("Mostrar Resultados");
        MostrarResultados1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MostrarResultados1MouseClicked(evt);
            }
        });
        MostrarResultados1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarResultados1ActionPerformed(evt);
            }
        });

        jMinMateria.setText("Escribir el min cupos");
        jMinMateria.setToolTipText("");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Guardar Resultados");
        openMenuItem.setActionCommand("Cargar");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(MostrarResultados1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jMinMateria)
                            .addComponent(ClasesCerradas, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CargarArchivoDePruebas, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(CargarCodigoFuente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Compilar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Ejecutar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NombreDelEjecutable))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CargarArchivoDePruebas, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(CargarCodigoFuente, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(NombreDelEjecutable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Compilar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jMinMateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ClasesCerradas, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MostrarResultados1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 12, Short.MAX_VALUE))))
        );

        NombreDelEjecutable.getAccessibleContext().setAccessibleName("Nombre");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void CargarArchivoDePruebasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarArchivoDePruebasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CargarArchivoDePruebasActionPerformed

    public static void executeUbuntu(String command) throws IOException, InterruptedException {
        Process proc1 = Runtime.getRuntime().exec(command);

        // Read the output
        BufferedReader reader
                = new BufferedReader(new InputStreamReader(proc1.getInputStream()));
        String line = "";
        while ((line = reader.readLine()) != null) {
            System.out.print(line + "\n");
        }

        proc1.waitFor();
    }

    public static void executeWindows(String command) throws IOException {
        Process proceso = Runtime.getRuntime().exec(command);
        String salida = null;
        InputStreamReader entrada = new InputStreamReader(proceso.getInputStream());
        BufferedReader stdInput = new BufferedReader(entrada);

        //Si el comando tiene una salida la mostramos
        if ((salida = stdInput.readLine()) != null) {
            System.out.println("Comando ejecutado Correctamente");
            while ((salida = stdInput.readLine()) != null) {
                System.out.println(salida);
            }
        } else {
            System.out.println("No se a producido ninguna salida");
        }
    }


    private void CargarArchivoDePruebasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CargarArchivoDePruebasMouseClicked
        archivoPruebas = jFileChooser1.getSelectedFile();
        JOptionPane.showMessageDialog(null, "El archivo " + archivoPruebas.getName() + " ha sido cargado");
    }//GEN-LAST:event_CargarArchivoDePruebasMouseClicked

    private void CargarCodigoFuenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarCodigoFuenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CargarCodigoFuenteActionPerformed

    private void EjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EjecutarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EjecutarActionPerformed

    private String getFileExtension(File file) {
        String name = file.getName();
        try {
            return name.substring(name.lastIndexOf(".") + 1);
        } catch (Exception e) {
            return "";
        }
    }

    private void CargarCodigoFuenteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CargarCodigoFuenteMouseClicked
        codigoFuente = jFileChooser1.getSelectedFile();
        JOptionPane.showMessageDialog(null, "El archivo " + codigoFuente.getName() + " ha sido cargado");
    }//GEN-LAST:event_CargarCodigoFuenteMouseClicked

    private void CompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompilarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CompilarActionPerformed

    private void CompilarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CompilarMouseClicked
        try {
            //new File(".").getParent();
            if (sSistemaOperativo.contains("Windows")) {
                if (getFileExtension(codigoFuente).equalsIgnoreCase("cpp")) {
                    JOptionPane.showMessageDialog(null, "Compilando...");
                    executeWindows("cmd /c g++ " + codigoFuente.getPath() + " -o " + NombreDelEjecutable.getText());
                    executeWindows("cmd /c move " + new File("").getAbsolutePath() + "\\" + NombreDelEjecutable.getText() + ".exe " + " " + codigoFuente.getParent());
                    //falta mover
                } else if (getFileExtension(codigoFuente).equalsIgnoreCase("py")) {
                    JOptionPane.showMessageDialog(null, "PYTHON NO ES UN LENGUAJE COMPILADO");
                } else {
                    System.out.println("NO SOPORTADO");
                }
            } else if (getFileExtension(codigoFuente).equalsIgnoreCase("cpp")) {
                JOptionPane.showMessageDialog(null, "Compilando...");
                executeUbuntu("g++ " + codigoFuente.getPath() + " -o " + NombreDelEjecutable.getText());
                executeUbuntu("mv " + NombreDelEjecutable.getText() + " " + codigoFuente.getParent());
            } else if (getFileExtension(codigoFuente).equalsIgnoreCase("py")) {
                JOptionPane.showMessageDialog(null, "PYTHON NO ES UN LENGUAJE COMPILADO");
            } else if (getFileExtension(codigoFuente).equalsIgnoreCase("java")) {
                JOptionPane.showMessageDialog(null, "NO SE PUEDE CAMBIAR EL NOMBRE ");
                executeUbuntu("javac " + codigoFuente.getPath());
                executeUbuntu("mv " + NombreDelEjecutable.getText() + " " + codigoFuente.getParent());
            } else {
                System.out.println("NO SOPORTADO");
            }
            jFileChooser1.updateUI();
        } catch (IOException ex) {
            Logger.getLogger(Cargar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Cargar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CompilarMouseClicked
    static String stripExtension(String str) {
        if (str == null) {
            return null;
        }
        int pos = str.lastIndexOf(".");
        if (pos == -1) {
            return str;
        }
        return str.substring(0, pos);
    }
    private void EjecutarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EjecutarMouseClicked
        try {
            if (sSistemaOperativo.contains("Windows")) {
                if (getFileExtension(codigoFuente).equalsIgnoreCase("cpp")) {
                    JOptionPane.showMessageDialog(null, "Ejecutando...");
                    executeWindows("cmd /c " + codigoFuente.getParent() + "\\" + NombreDelEjecutable.getText() + ".exe " + archivoPruebas.getPath());
                } else if (getFileExtension(codigoFuente).equalsIgnoreCase("py")) {
                    JOptionPane.showMessageDialog(null, "Ejecutando...");
                    executeUbuntu("python " + codigoFuente.getPath());
                } else {
                    System.out.println("NO SOPORTADO");
                }
            } else if (getFileExtension(codigoFuente).equalsIgnoreCase("cpp")) {
                JOptionPane.showMessageDialog(null, "Ejecutando...");
                executeUbuntu("" + codigoFuente.getParent() + "/" + NombreDelEjecutable.getText() + " " + archivoPruebas.getPath());
            } else if (getFileExtension(codigoFuente).equalsIgnoreCase("py")) {
                JOptionPane.showMessageDialog(null, "Ejecutando...");
                executeUbuntu("python " + codigoFuente.getPath() + " " + archivoPruebas.getPath());
            } else if (getFileExtension(codigoFuente).equalsIgnoreCase("java")) {
                JOptionPane.showMessageDialog(null, "Ejecutando...");
                //System.out.println("java " + codigoFuente.getParent() + "/" + stripExtension(codigoFuente.getName()) + ".class" + " " + archivoPruebas.getPath());
                executeUbuntu("java -cp " + codigoFuente.getParent() + " " + stripExtension(codigoFuente.getName()) + " " + archivoPruebas.getPath());
            } else {
                System.out.println("NO SOPORTADO");
            }

        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(Cargar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EjecutarMouseClicked

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JOptionPane.showMessageDialog(null, "Los resultados se han guardado");
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void NombreDelEjecutableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreDelEjecutableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombreDelEjecutableActionPerformed

    private void NombreDelEjecutableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NombreDelEjecutableMouseClicked
        NombreDelEjecutable.setText("");
    }//GEN-LAST:event_NombreDelEjecutableMouseClicked

    private void ClasesCerradasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClasesCerradasMouseClicked
        Grafica a = new Grafica();
        a.setVisible(true);
        //this.setVisible(false);
    }//GEN-LAST:event_ClasesCerradasMouseClicked

    private void MostrarResultados1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MostrarResultados1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_MostrarResultados1MouseClicked

    private void ClasesCerradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClasesCerradasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClasesCerradasActionPerformed

    private void MostrarResultados1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarResultados1ActionPerformed
        // TODO add your handling code here:
        Estudiantes a = new Estudiantes();
        a.setVisible(true);
        // this.setVisible(false);
    }//GEN-LAST:event_MostrarResultados1ActionPerformed

    /**
     * ""
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cargar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cargar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cargar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cargar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Cargar().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Cargar.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CargarArchivoDePruebas;
    private javax.swing.JButton CargarCodigoFuente;
    private javax.swing.JButton ClasesCerradas;
    private javax.swing.JButton Compilar;
    private javax.swing.JButton Ejecutar;
    private javax.swing.JButton MostrarResultados1;
    private javax.swing.JTextField NombreDelEjecutable;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JTextField jMinMateria;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    // End of variables declaration//GEN-END:variables
    private File archivoPruebas;
    private File codigoFuente;
    private String extensionCodigoFuente;
    private String sSistemaOperativo;
}
